{"ast":null,"code":"import axios from 'axios';\nimport USER_HELPERS from '../utils/userToken'; // here we are just maing our code look more DRY. With every backend call we must deal with errors and success states. The idea of creating these kinds of services is to make our lives easier in the components\n\nfunction internalServerError(err) {\n  if (err.response && err.response.data && err.response.data.errorMessage) {\n    return {\n      status: false,\n      errorMessage: err.response.data.errorMessage\n    };\n  }\n\n  return {\n    status: false,\n    errorMessage: 'Internal server error. Please check your server'\n  };\n}\n\nfunction successStatus(res) {\n  return {\n    status: true,\n    data: res.data\n  };\n}\n\nconst instance = axios.create({\n  baseURL: `${process.env.REACT_APP_SERVER_URL}/auth`,\n  withCredentials: true\n}); // const authService = {\n//   signup: (body) =>\n//     instance.post(\"/signup\", body).then((response) => response.data),\n//   getSession: () => instance.get(\"/session\").then((response) => response.data),\n// };\n\nexport function login(credentials) {\n  return instance.post('/login', credentials).then(successStatus).catch(internalServerError);\n}\nexport function getLoggedIn() {\n  return instance.get(`/session`, {\n    headers: {\n      authorization: USER_HELPERS.getUserToken()\n    }\n  }).then(successStatus).catch(internalServerError);\n}\nexport function signup(credentials) {\n  console.log('in signup auth-service');\n  return instance.post('/signup', credentials).then(successStatus).catch(internalServerError);\n}\nexport function logout() {\n  return instance.delete('/logout', {\n    headers: {\n      authorization: USER_HELPERS.removeUserToken()\n    }\n  }).then(successStatus).catch(internalServerError);\n} // export default authService;","map":{"version":3,"sources":["/Users/fernandosalcedo/Desktop/Ironhack/academy-hacks/prog-lang-tutor-client/src/services/auth-service.js"],"names":["axios","USER_HELPERS","internalServerError","err","response","data","errorMessage","status","successStatus","res","instance","create","baseURL","process","env","REACT_APP_SERVER_URL","withCredentials","login","credentials","post","then","catch","getLoggedIn","get","headers","authorization","getUserToken","signup","console","log","logout","delete","removeUserToken"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;;AACA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,MAAIA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,YAA3D,EAAyE;AACvE,WAAO;AACLC,MAAAA,MAAM,EAAE,KADH;AAELD,MAAAA,YAAY,EAAEH,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC;AAF3B,KAAP;AAID;;AACD,SAAO;AACLC,IAAAA,MAAM,EAAE,KADH;AAELD,IAAAA,YAAY,EAAE;AAFT,GAAP;AAID;;AAED,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAO;AACLF,IAAAA,MAAM,EAAE,IADH;AAELF,IAAAA,IAAI,EAAEI,GAAG,CAACJ;AAFL,GAAP;AAID;;AAED,MAAMK,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,OADjB;AAE5BC,EAAAA,eAAe,EAAE;AAFW,CAAb,CAAjB,C,CAKA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,KAAT,CAAeC,WAAf,EAA4B;AACjC,SAAOR,QAAQ,CACZS,IADI,CACC,QADD,EACWD,WADX,EAEJE,IAFI,CAECZ,aAFD,EAGJa,KAHI,CAGEnB,mBAHF,CAAP;AAID;AAED,OAAO,SAASoB,WAAT,GAAuB;AAC5B,SAAOZ,QAAQ,CACZa,GADI,CACC,UADD,EACY;AACfC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAExB,YAAY,CAACyB,YAAb;AADR;AADM,GADZ,EAMJN,IANI,CAMCZ,aAND,EAOJa,KAPI,CAOEnB,mBAPF,CAAP;AAQD;AAED,OAAO,SAASyB,MAAT,CAAgBT,WAAhB,EAA6B;AAClCU,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,SAAOnB,QAAQ,CACZS,IADI,CACC,SADD,EACYD,WADZ,EAEJE,IAFI,CAECZ,aAFD,EAGJa,KAHI,CAGEnB,mBAHF,CAAP;AAID;AAED,OAAO,SAAS4B,MAAT,GAAkB;AACvB,SAAOpB,QAAQ,CACZqB,MADI,CACG,SADH,EACc;AACjBP,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAExB,YAAY,CAAC+B,eAAb;AADR;AADQ,GADd,EAMJZ,IANI,CAMCZ,aAND,EAOJa,KAPI,CAOEnB,mBAPF,CAAP;AAQD,C,CAED","sourcesContent":["import axios from 'axios';\nimport USER_HELPERS from '../utils/userToken';\n\n// here we are just maing our code look more DRY. With every backend call we must deal with errors and success states. The idea of creating these kinds of services is to make our lives easier in the components\nfunction internalServerError(err) {\n  if (err.response && err.response.data && err.response.data.errorMessage) {\n    return {\n      status: false,\n      errorMessage: err.response.data.errorMessage,\n    };\n  }\n  return {\n    status: false,\n    errorMessage: 'Internal server error. Please check your server',\n  };\n}\n\nfunction successStatus(res) {\n  return {\n    status: true,\n    data: res.data,\n  };\n}\n\nconst instance = axios.create({\n  baseURL: `${process.env.REACT_APP_SERVER_URL}/auth`,\n  withCredentials: true,\n});\n\n// const authService = {\n//   signup: (body) =>\n//     instance.post(\"/signup\", body).then((response) => response.data),\n//   getSession: () => instance.get(\"/session\").then((response) => response.data),\n// };\n\nexport function login(credentials) {\n  return instance\n    .post('/login', credentials)\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function getLoggedIn() {\n  return instance\n    .get(`/session`, {\n      headers: {\n        authorization: USER_HELPERS.getUserToken(),\n      },\n    })\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function signup(credentials) {\n  console.log('in signup auth-service');\n  return instance\n    .post('/signup', credentials)\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function logout() {\n  return instance\n    .delete('/logout', {\n      headers: {\n        authorization: USER_HELPERS.removeUserToken(),\n      },\n    })\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\n// export default authService;\n"]},"metadata":{},"sourceType":"module"}