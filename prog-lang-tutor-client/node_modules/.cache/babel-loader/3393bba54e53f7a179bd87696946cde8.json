{"ast":null,"code":"import axios from 'axios';\nconst service = axios.create({\n  baseURL: 'http://localhost:5000/api/profile' // withCredentials: true // => you might need this when having the users in the app\n\n});\nconst PROFILE_SERVICE = {\n  handleUpload: (profilePic, userId) => {\n    return service.post(`/profileImage/${userId}`, profilePic).then(responseFromApi => responseFromApi.data).catch(err => console.log('Picture has not been uploaded', {\n      err: err\n    }));\n  },\n  handleUpdateTutorDetails: updatedData => {\n    const {\n      firstName,\n      lastName,\n      countryOfOrigin,\n      teachingExperience,\n      courseName,\n      description,\n      from,\n      to,\n      prevCourseName\n    } = updatedData;\n    return service.patch(`tutor/${updatedData.user._id}`, {\n      firstName,\n      lastName,\n      countryOfOrigin,\n      teachingExperience,\n      courseName,\n      description,\n      from,\n      to,\n      prevCourseName\n    }).then(responseFromApi => responseFromApi.data).catch(err => console.log(\"Tutor's data was not updated\", err));\n  },\n  handleUpdateStudentDetails: updatedData => {\n    console.log('updating STUDENTfrom the component:', {\n      updatedData: updatedData\n    });\n    const {\n      firstName,\n      lastName,\n      countryOfOrigin,\n      aboutMe\n    } = updatedData;\n    return service.patch(`student/${updatedData.user._id}`, {\n      firstName,\n      lastName,\n      countryOfOrigin,\n      aboutMe\n    }).then(responseFromApi => responseFromApi.data).catch(err => console.log(\"Student's data was not updated\", err));\n  }\n};\nexport default PROFILE_SERVICE;","map":{"version":3,"sources":["/Users/fernandosalcedo/Desktop/Ironhack/academy-hacks/prog-lang-tutor-client/src/services/ProfileServices.js"],"names":["axios","service","create","baseURL","PROFILE_SERVICE","handleUpload","profilePic","userId","post","then","responseFromApi","data","catch","err","console","log","handleUpdateTutorDetails","updatedData","firstName","lastName","countryOfOrigin","teachingExperience","courseName","description","from","to","prevCourseName","patch","user","_id","handleUpdateStudentDetails","aboutMe"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE,mCADkB,CAE3B;;AAF2B,CAAb,CAAhB;AAKA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,YAAY,EAAE,CAACC,UAAD,EAAaC,MAAb,KAAwB;AACpC,WAAON,OAAO,CACXO,IADI,CACE,iBAAgBD,MAAO,EADzB,EAC4BD,UAD5B,EAEJG,IAFI,CAEEC,eAAD,IAAqBA,eAAe,CAACC,IAFtC,EAGJC,KAHI,CAGGC,GAAD,IACLC,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6C;AAAEF,MAAAA,GAAG,EAAEA;AAAP,KAA7C,CAJG,CAAP;AAMD,GARqB;AAStBG,EAAAA,wBAAwB,EAAGC,WAAD,IAAiB;AACzC,UAAM;AACJC,MAAAA,SADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,eAHI;AAIJC,MAAAA,kBAJI;AAKJC,MAAAA,UALI;AAMJC,MAAAA,WANI;AAOJC,MAAAA,IAPI;AAQJC,MAAAA,EARI;AASJC,MAAAA;AATI,QAUFT,WAVJ;AAYA,WAAOhB,OAAO,CACX0B,KADI,CACG,SAAQV,WAAW,CAACW,IAAZ,CAAiBC,GAAI,EADhC,EACmC;AACtCX,MAAAA,SADsC;AAEtCC,MAAAA,QAFsC;AAGtCC,MAAAA,eAHsC;AAItCC,MAAAA,kBAJsC;AAKtCC,MAAAA,UALsC;AAMtCC,MAAAA,WANsC;AAOtCC,MAAAA,IAPsC;AAQtCC,MAAAA,EARsC;AAStCC,MAAAA;AATsC,KADnC,EAYJjB,IAZI,CAYEC,eAAD,IAAqBA,eAAe,CAACC,IAZtC,EAaJC,KAbI,CAaGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CF,GAA5C,CAbX,CAAP;AAcD,GApCqB;AAqCtBiB,EAAAA,0BAA0B,EAAGb,WAAD,IAAiB;AAC3CH,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmD;AACjDE,MAAAA,WAAW,EAAEA;AADoC,KAAnD;AAGA,UAAM;AAAEC,MAAAA,SAAF;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA,eAAvB;AAAwCW,MAAAA;AAAxC,QAAoDd,WAA1D;AAEA,WAAOhB,OAAO,CACX0B,KADI,CACG,WAAUV,WAAW,CAACW,IAAZ,CAAiBC,GAAI,EADlC,EACqC;AACxCX,MAAAA,SADwC;AAExCC,MAAAA,QAFwC;AAGxCC,MAAAA,eAHwC;AAIxCW,MAAAA;AAJwC,KADrC,EAOJtB,IAPI,CAOEC,eAAD,IAAqBA,eAAe,CAACC,IAPtC,EAQJC,KARI,CAQGC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,GAA9C,CARX,CAAP;AASD;AApDqB,CAAxB;AAuDA,eAAeT,eAAf","sourcesContent":["import axios from 'axios';\n\nconst service = axios.create({\n  baseURL: 'http://localhost:5000/api/profile',\n  // withCredentials: true // => you might need this when having the users in the app\n});\n\nconst PROFILE_SERVICE = {\n  handleUpload: (profilePic, userId) => {\n    return service\n      .post(`/profileImage/${userId}`, profilePic)\n      .then((responseFromApi) => responseFromApi.data)\n      .catch((err) =>\n        console.log('Picture has not been uploaded', { err: err })\n      );\n  },\n  handleUpdateTutorDetails: (updatedData) => {\n    const {\n      firstName,\n      lastName,\n      countryOfOrigin,\n      teachingExperience,\n      courseName,\n      description,\n      from,\n      to,\n      prevCourseName,\n    } = updatedData;\n\n    return service\n      .patch(`tutor/${updatedData.user._id}`, {\n        firstName,\n        lastName,\n        countryOfOrigin,\n        teachingExperience,\n        courseName,\n        description,\n        from,\n        to,\n        prevCourseName,\n      })\n      .then((responseFromApi) => responseFromApi.data)\n      .catch((err) => console.log(\"Tutor's data was not updated\", err));\n  },\n  handleUpdateStudentDetails: (updatedData) => {\n    console.log('updating STUDENTfrom the component:', {\n      updatedData: updatedData,\n    });\n    const { firstName, lastName, countryOfOrigin, aboutMe } = updatedData;\n\n    return service\n      .patch(`student/${updatedData.user._id}`, {\n        firstName,\n        lastName,\n        countryOfOrigin,\n        aboutMe,\n      })\n      .then((responseFromApi) => responseFromApi.data)\n      .catch((err) => console.log(\"Student's data was not updated\", err));\n  },\n};\n\nexport default PROFILE_SERVICE;\n"]},"metadata":{},"sourceType":"module"}