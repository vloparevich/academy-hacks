{"ast":null,"code":"import axios from \"axios\";\nimport USER_HELPERS from \"../utils/userToken\"; // here we are just maing our code look more DRY. With every backend call we must deal with errors and success states. The idea of creating these kinds of services is to make our lives easier in the components\n\nfunction internalServerError(err) {\n  // console.log('err:', err.response.data);\n  if (err.response && err.response.data && err.response.data.errorMessage) {\n    return {\n      status: false,\n      errorMessage: err.response.data.errorMessage\n    };\n  }\n\n  return {\n    status: false,\n    errorMessage: \"Internal server error. Please check your server\"\n  };\n}\n\nfunction successStatus(res) {\n  return {\n    status: true,\n    data: res.data\n  };\n} // creates a basic url for every request in this file\n\n\nconst authService = axios.create({\n  baseURL: `${process.env.REACT_APP_SERVER_URL}/auth`\n});\nexport function login(credentials) {\n  return authService.post(\"/login\", credentials).then(successStatus).catch(internalServerError);\n}\nexport function getLoggedIn() {\n  return authService.get(`/session`, {\n    headers: {\n      authorization: USER_HELPERS.getUserToken()\n    }\n  }).then(successStatus).catch(internalServerError);\n}\nexport function signup(credentials) {\n  return authService.post(\"/signup\", credentials).then(successStatus).catch(internalServerError);\n}\nexport function logout() {\n  console.log(\"Soemthing is wrong here\", USER_HELPERS.getUserToken());\n  return authService.delete(\"/logout\", {\n    headers: {\n      authorization: USER_HELPERS.getUserToken()\n    }\n  }).then(successStatus).catch(internalServerError);\n}","map":{"version":3,"sources":["/Users/fernandosalcedo/Desktop/Ironhack/academy-hacks/prog-lang-tutor-client/src/services/auth.js"],"names":["axios","USER_HELPERS","internalServerError","err","response","data","errorMessage","status","successStatus","res","authService","create","baseURL","process","env","REACT_APP_SERVER_URL","login","credentials","post","then","catch","getLoggedIn","get","headers","authorization","getUserToken","signup","logout","console","log","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,oBAAzB,C,CAEA;;AACA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC;AACA,MAAIA,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAaC,IAA7B,IAAqCF,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC,YAA3D,EAAyE;AACvE,WAAO;AACLC,MAAAA,MAAM,EAAE,KADH;AAELD,MAAAA,YAAY,EAAEH,GAAG,CAACC,QAAJ,CAAaC,IAAb,CAAkBC;AAF3B,KAAP;AAID;;AACD,SAAO;AACLC,IAAAA,MAAM,EAAE,KADH;AAELD,IAAAA,YAAY,EAAE;AAFT,GAAP;AAID;;AAED,SAASE,aAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAO;AACLF,IAAAA,MAAM,EAAE,IADH;AAELF,IAAAA,IAAI,EAAEI,GAAG,CAACJ;AAFL,GAAP;AAID,C,CAED;;;AACA,MAAMK,WAAW,GAAGV,KAAK,CAACW,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAG,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB;AADd,CAAb,CAApB;AAIA,OAAO,SAASC,KAAT,CAAeC,WAAf,EAA4B;AACjC,SAAOP,WAAW,CACfQ,IADI,CACC,QADD,EACWD,WADX,EAEJE,IAFI,CAECX,aAFD,EAGJY,KAHI,CAGElB,mBAHF,CAAP;AAID;AAED,OAAO,SAASmB,WAAT,GAAuB;AAC5B,SAAOX,WAAW,CACfY,GADI,CACC,UADD,EACY;AACfC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEvB,YAAY,CAACwB,YAAb;AADR;AADM,GADZ,EAMJN,IANI,CAMCX,aAND,EAOJY,KAPI,CAOElB,mBAPF,CAAP;AAQD;AAED,OAAO,SAASwB,MAAT,CAAgBT,WAAhB,EAA6B;AAClC,SAAOP,WAAW,CACfQ,IADI,CACC,SADD,EACYD,WADZ,EAEJE,IAFI,CAECX,aAFD,EAGJY,KAHI,CAGElB,mBAHF,CAAP;AAID;AAED,OAAO,SAASyB,MAAT,GAAkB;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuC5B,YAAY,CAACwB,YAAb,EAAvC;AACA,SAAOf,WAAW,CACfoB,MADI,CACG,SADH,EACc;AACjBP,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAEvB,YAAY,CAACwB,YAAb;AADR;AADQ,GADd,EAMJN,IANI,CAMCX,aAND,EAOJY,KAPI,CAOElB,mBAPF,CAAP;AAQD","sourcesContent":["import axios from \"axios\";\nimport USER_HELPERS from \"../utils/userToken\";\n\n// here we are just maing our code look more DRY. With every backend call we must deal with errors and success states. The idea of creating these kinds of services is to make our lives easier in the components\nfunction internalServerError(err) {\n  // console.log('err:', err.response.data);\n  if (err.response && err.response.data && err.response.data.errorMessage) {\n    return {\n      status: false,\n      errorMessage: err.response.data.errorMessage,\n    };\n  }\n  return {\n    status: false,\n    errorMessage: \"Internal server error. Please check your server\",\n  };\n}\n\nfunction successStatus(res) {\n  return {\n    status: true,\n    data: res.data,\n  };\n}\n\n// creates a basic url for every request in this file\nconst authService = axios.create({\n  baseURL: `${process.env.REACT_APP_SERVER_URL}/auth`,\n});\n\nexport function login(credentials) {\n  return authService\n    .post(\"/login\", credentials)\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function getLoggedIn() {\n  return authService\n    .get(`/session`, {\n      headers: {\n        authorization: USER_HELPERS.getUserToken(),\n      },\n    })\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function signup(credentials) {\n  return authService\n    .post(\"/signup\", credentials)\n    .then(successStatus)\n    .catch(internalServerError);\n}\n\nexport function logout() {\n  console.log(\"Soemthing is wrong here\", USER_HELPERS.getUserToken());\n  return authService\n    .delete(\"/logout\", {\n      headers: {\n        authorization: USER_HELPERS.getUserToken(),\n      },\n    })\n    .then(successStatus)\n    .catch(internalServerError);\n}\n"]},"metadata":{},"sourceType":"module"}