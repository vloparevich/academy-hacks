{"ast":null,"code":"var _jsxFileName = \"/Users/fernandosalcedo/Desktop/Ironhack/academy-hacks/prog-lang-tutor-client/src/routing-components/ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as PATHS from '../utils/paths'; // the protected route component must take a user in order to check if the user is authenticated or not. If not moves the user to the login page\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProtectedRoute = _ref => {\n  let {\n    user,\n    exact,\n    to,\n    path,\n    component,\n    ...componentProps\n  } = _ref;\n  const Component = component;\n\n  if (!user) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: PATHS.LOGINPAGE\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Route, {\n    exact: exact,\n    path: path || to,\n    render: props => /*#__PURE__*/_jsxDEV(Component, { ...componentProps,\n      ...props,\n      user: user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_c = ProtectedRoute;\nexport default ProtectedRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"sources":["/Users/fernandosalcedo/Desktop/Ironhack/academy-hacks/prog-lang-tutor-client/src/routing-components/ProtectedRoute.jsx"],"names":["React","Route","Redirect","PATHS","ProtectedRoute","user","exact","to","path","component","componentProps","Component","LOGINPAGE","props"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAO,KAAKC,KAAZ,MAAuB,gBAAvB,C,CAEA;;;;AACA,MAAMC,cAAc,GAAG,QAOjB;AAAA,MAPkB;AACtBC,IAAAA,IADsB;AAEtBC,IAAAA,KAFsB;AAGtBC,IAAAA,EAHsB;AAItBC,IAAAA,IAJsB;AAKtBC,IAAAA,SALsB;AAMtB,OAAGC;AANmB,GAOlB;AACJ,QAAMC,SAAS,GAAGF,SAAlB;;AACA,MAAI,CAACJ,IAAL,EAAW;AACT,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAEF,KAAK,CAACS;AAApB;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBACE,QAAC,KAAD;AACE,IAAA,KAAK,EAAEN,KADT;AAEE,IAAA,IAAI,EAAEE,IAAI,IAAID,EAFhB;AAGE,IAAA,MAAM,EAAGM,KAAD,iBACN,QAAC,SAAD,OAAeH,cAAf;AAAA,SAAmCG,KAAnC;AAA0C,MAAA,IAAI,EAAER;AAAhD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CArBD;;KAAMD,c;AAuBN,eAAeA,cAAf","sourcesContent":["import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport * as PATHS from '../utils/paths';\n\n// the protected route component must take a user in order to check if the user is authenticated or not. If not moves the user to the login page\nconst ProtectedRoute = ({\n  user,\n  exact,\n  to,\n  path,\n  component,\n  ...componentProps\n}) => {\n  const Component = component;\n  if (!user) {\n    return <Redirect to={PATHS.LOGINPAGE} />;\n  }\n  return (\n    <Route\n      exact={exact}\n      path={path || to}\n      render={(props) => (\n        <Component {...componentProps} {...props} user={user} />\n      )}\n    />\n  );\n};\n\nexport default ProtectedRoute;\n"]},"metadata":{},"sourceType":"module"}